{"version":3,"file":"template-compiler-common.js","sourceRoot":"","sources":["template-compiler-common.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0DAAiC;AAEjC,+BAA4B;AAC5B,2DAA6C;AAC7C,wGAA2E;AAiE3E,MAAa,gBAAgB;IAM3B,YAAY,MAA8B;QACxC,IAAI,CAAC,yBAAyB,GAAG,MAAM,CAAC,yBAAyB,CAAC;QAClE,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAChC,CAAC;IAED,IAAY,MAAM;QAChB,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAGO,KAAK;QACX,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAChE,IAAI,MAAM,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAC3C,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1C,2CAA2C;QAC3C,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAGO,qBAAqB,CAAC,GAAc;QAC1C,OAAO,GAAG,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED,oDAAoD;IACpD,UAAU,CACR,cAAsB,EACtB,OAAuD;;QAEvD,IAAI,YAA2B,CAAC;QAChC,IAAI,WAAmB,CAAC;QACxB,IAAI,QAAQ,GAAW,OAAO,CAAC,QAAQ,CAAC;QAExC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;SAC5D;aAAM;YACL,WAAW,GAAG,QAAQ,CAAC;SACxB;QAED,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC1F,IAAI,OAAO,GAAY;YACrB,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO;YAEhB,GAAG,EAAE;gBACH,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAI,CAAC;gBAChD,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC;gBAEnD,+EAA+E;gBAC/E,GAAG,CAAC,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,0CAAE,GAAG,mCAAI,EAAE,CAAC;aAC9B,CAAC,MAAM,CAAC,OAAO,CAAC;SAClB,CAAC;QAEF,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAA,mBAAQ,EAAC,cAAc,CAAC,EAAE;YAC9D,QAAQ,EAAE,cAAc;YACxB,UAAU,EAAE,WAAW;YACvB,OAAO;YACP,GAAG,OAAO;SACX,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;SACvD;aAAM;YACL,YAAY,GAAG,EAAE,CAAC;SACnB;QAED,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;IACpC,CAAC;IAED,mEAAmE;IACnE,cAAc;IACd,eAAe,CAAC,UAAkB,EAAE,QAAgB;QAClD,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;QAEhE,sEAAsE;QACtE,wEAAwE;QACxE,sEAAsE;QACtE,8BAA8B;QAC9B,EAAE;QACF,oEAAoE;QACpE,oEAAoE;QACpE,2DAA2D;QAC3D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,qCAAqC;QACxE,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC5E,mEAAmE;YACnE,+DAA+D;YAC/D,OAAO,IAAA,0CAA2B,EAAC,MAAa,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,qFAAqF;QACrF,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QAEtB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QAC5G,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAEjD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,UAAkB,EAAE,QAAgB;QACxC,kEAAkE;QAClE,IAAI,IAAI,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;QACjD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,OAAO;QACL,OAAO,IAAA,WAAI,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;CACF;AAhGC;IADC,IAAA,4BAAO,GAAE;6CAOT;AAGD;IADC,IAAA,4BAAO,GAAE;6DAGT;AAjCH,4CAsHC;AAED,0EAA0E;AAC1E,SAAS,kBAAkB,CAAC,MAAqB,EAAE,QAAa;IAC9D,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO;KACR;IAED,IAAI,KAAK,CAAC;IAEV,IAAI,QAAQ,CAAC,QAAQ,EAAE;QACrB,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACvC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,QAAQ,EAAE;QACZ,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,IAAI,KAAK,UAAU,EAAE;gBACvB,OAAO;aACR;YACD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;KACJ;AACH,CAAC;AAED,sEAAsE;AACtE,+EAA+E;AAC/E,+DAA+D;AAC/D,8BAA8B;AAC9B,SAAS,iBAAiB,CAAC,4BAAiC;;IAC1D,mEAAmE;IACnE,wDAAwD;IACxD,IAAI,4BAA4B,CAAC,WAAW,KAAK,SAAS,EAAE;QAC1D,OAAO;YACL,KAAK,EAAE,4BAA4B,CAAC,MAAM;YAC1C,UAAU,EAAE,4BAA4B,CAAC,WAAW;YACpD,cAAc,EAAE,4BAA4B,CAAC,oBAAoB;YACjE,UAAU,EAAE,4BAA4B,CAAC,UAAU;YACnD,MAAM,EAAE,4BAA4B,CAAC,MAAM;SAC5C,CAAC;KACH;SAAM;QACL,kHAAkH;QAClH,mDAAmD;QACnD,EAAE;QACF,iEAAiE;QACjE,EAAE;QACF,gCAAgC;QAChC,2BAA2B;QAC3B,wEAAwE;QACxE,IAAI,MAAM,GAAG,CAAC,MAAA,4BAA4B,CAAC,KAAK,mCAAI,4BAA4B,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CACvG,iBAAiB,CAClB,CAAC;QACF,IAAI,eAAe,GAAG,CAAC,MAAA,4BAA4B,CAAC,KAAK,mCAAI,4BAA4B,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAChH,oDAAoD,CACrD,CAAC;QAEF,OAAO;YACL,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,UAAU,EAAE,MAAM,CAAC,UAAU;YAC7B,cAAc,EAAE,eAAe,CAAC,OAAO;YACvC,UAAU,EAAE,4BAA4B,CAAC,UAAU;YACnD,MAAM,EAAE,4BAA4B,CAAC,MAAM;SAC5C,CAAC;KACH;AACH,CAAC","sourcesContent":["import stripBom from 'strip-bom';\nimport { Resolver, ResolvedDep } from './resolver';\nimport { join } from 'path';\nimport { Memoize } from 'typescript-memoize';\nimport wrapLegacyHbsPluginIfNeeded from 'wrap-legacy-hbs-plugin-if-needed';\n\nexport interface Plugins {\n  ast?: unknown[];\n}\n\nexport interface AST {\n  _deliberatelyOpaque: 'AST';\n}\n\nexport interface PreprocessOptions {\n  contents: string;\n  moduleName: string;\n  plugins?: Plugins;\n  filename?: string;\n\n  parseOptions?: {\n    srcName?: string;\n    ignoreStandalone?: boolean;\n  };\n\n  // added in Ember 3.17 (@glimmer/syntax@0.40.2)\n  mode?: 'codemod' | 'precompile';\n\n  // added in Ember 3.25\n  strictMode?: boolean;\n  locals?: string[];\n}\n\nexport interface PrinterOptions {\n  entityEncoding?: 'transformed' | 'raw';\n}\n\n// This just reflects the API we're extracting from ember-template-compiler.js,\n// plus a cache key that lets us know when the underlying source has remained\n// stable.\nexport interface GlimmerSyntax {\n  preprocess(html: string, options?: PreprocessOptions): AST;\n  print(ast: AST, options?: PrinterOptions): string;\n  defaultOptions(options: PreprocessOptions): PreprocessOptions;\n  precompile(\n    templateContents: string,\n    options: {\n      contents: string;\n      moduleName: string;\n      filename: string;\n      plugins?: any;\n      parseOptions?: {\n        srcName?: string;\n      };\n    }\n  ): string;\n  _Ember: { FEATURES: any; ENV: any };\n}\n\nexport interface TemplateCompilerParams {\n  // this should be the exports object from ember-template-compiler.js. It's\n  // \"unknown\" here because it changes shape in different ember versions, we\n  // will do our best to consume it.\n  loadEmberTemplateCompiler: () => { theExports: unknown; cacheKey: string };\n  resolver?: Resolver;\n  EmberENV: unknown;\n  plugins: Plugins;\n}\n\nexport class TemplateCompiler {\n  private loadEmberTemplateCompiler: () => { theExports: unknown; cacheKey: string };\n  private resolver?: Resolver;\n  private EmberENV: unknown;\n  private plugins: Plugins;\n\n  constructor(params: TemplateCompilerParams) {\n    this.loadEmberTemplateCompiler = params.loadEmberTemplateCompiler;\n    this.resolver = params.resolver;\n    this.EmberENV = params.EmberENV;\n    this.plugins = params.plugins;\n  }\n\n  private get syntax(): GlimmerSyntax {\n    return this.setup().syntax;\n  }\n\n  get cacheKey(): string {\n    return this.setup().cacheKey;\n  }\n\n  @Memoize()\n  private setup() {\n    let { theExports, cacheKey } = this.loadEmberTemplateCompiler();\n    let syntax = loadGlimmerSyntax(theExports);\n    initializeEmberENV(syntax, this.EmberENV);\n    // todo: get resolver reflected in cacheKey\n    return { syntax, cacheKey };\n  }\n\n  @Memoize()\n  private getReversedASTPlugins(ast: unknown[]): unknown[] {\n    return ast.slice().reverse();\n  }\n\n  // Compiles to the wire format plus dependency list.\n  precompile(\n    templateSource: string,\n    options: Record<string, unknown> & { filename: string }\n  ): { compiled: string; dependencies: ResolvedDep[] } {\n    let dependencies: ResolvedDep[];\n    let runtimeName: string;\n    let filename: string = options.filename;\n\n    if (this.resolver) {\n      runtimeName = this.resolver.absPathToRuntimePath(filename);\n    } else {\n      runtimeName = filename;\n    }\n\n    let opts = this.syntax.defaultOptions({ contents: templateSource, moduleName: filename });\n    let plugins: Plugins = {\n      ...opts?.plugins,\n\n      ast: [\n        ...this.getReversedASTPlugins(this.plugins.ast!),\n        this.resolver && this.resolver.astTransformer(this),\n\n        // Ember 3.27+ uses _buildCompileOptions will not add AST plugins to its result\n        ...(opts?.plugins?.ast ?? []),\n      ].filter(Boolean),\n    };\n\n    let compiled = this.syntax.precompile(stripBom(templateSource), {\n      contents: templateSource,\n      moduleName: runtimeName,\n      plugins,\n      ...options,\n    });\n\n    if (this.resolver) {\n      dependencies = this.resolver.dependenciesOf(filename);\n    } else {\n      dependencies = [];\n    }\n\n    return { compiled, dependencies };\n  }\n\n  // Applies all custom AST transforms and emits the results still as\n  // handlebars.\n  applyTransforms(moduleName: string, contents: string): string {\n    let opts = this.syntax.defaultOptions({ contents, moduleName });\n\n    // the user-provided plugins come first in the list, and those are the\n    // only ones we want to run. The built-in plugins don't need to run here\n    // in stage1, it's better that they run in stage3 when the appropriate\n    // ember version is in charge.\n    //\n    // rather than slicing them off, we could choose instead to not call\n    // syntax.defaultOptions, but then we lose some of the compatibility\n    // normalization that it does on the user-provided plugins.\n    opts.plugins = opts.plugins || {}; // Ember 3.27+ won't add opts.plugins\n    opts.plugins.ast = this.getReversedASTPlugins(this.plugins.ast!).map(plugin => {\n      // Although the precompile API does, this direct glimmer syntax api\n      // does not support these legacy plugins, so we must wrap them.\n      return wrapLegacyHbsPluginIfNeeded(plugin as any);\n    });\n\n    // instructs glimmer-vm to preserve entity encodings (e.g. don't parse &nbsp; -> ' ')\n    opts.mode = 'codemod';\n\n    opts.filename = moduleName;\n    opts.moduleName = this.resolver ? this.resolver.absPathToRuntimePath(moduleName) || moduleName : moduleName;\n    let ast = this.syntax.preprocess(contents, opts);\n\n    return this.syntax.print(ast, { entityEncoding: 'raw' });\n  }\n\n  parse(moduleName: string, contents: string): AST {\n    // this is just a parse, so we deliberately don't run any plugins.\n    let opts = { contents, moduleName, plugins: {} };\n    return this.syntax.preprocess(contents, opts);\n  }\n\n  baseDir() {\n    return join(__dirname, '..');\n  }\n}\n\n// this matches the setup done by ember-cli-htmlbars: https://git.io/JtbN6\nfunction initializeEmberENV(syntax: GlimmerSyntax, EmberENV: any) {\n  if (!EmberENV) {\n    return;\n  }\n\n  let props;\n\n  if (EmberENV.FEATURES) {\n    props = Object.keys(EmberENV.FEATURES);\n    props.forEach(prop => {\n      syntax._Ember.FEATURES[prop] = EmberENV.FEATURES[prop];\n    });\n  }\n\n  if (EmberENV) {\n    props = Object.keys(EmberENV);\n    props.forEach(prop => {\n      if (prop === 'FEATURES') {\n        return;\n      }\n      syntax._Ember.ENV[prop] = EmberENV[prop];\n    });\n  }\n}\n\n// we could directly depend on @glimmer/syntax and have nice types and\n// everything. But the problem is, we really want to use the exact version that\n// the app itself is using, and its copy is bundled away inside\n// ember-template-compiler.js.\nfunction loadGlimmerSyntax(emberTemplateCompilerExports: any): GlimmerSyntax {\n  // detect if we are using an Ember version with the exports we need\n  // (from https://github.com/emberjs/ember.js/pull/19426)\n  if (emberTemplateCompilerExports._preprocess !== undefined) {\n    return {\n      print: emberTemplateCompilerExports._print,\n      preprocess: emberTemplateCompilerExports._preprocess,\n      defaultOptions: emberTemplateCompilerExports._buildCompileOptions,\n      precompile: emberTemplateCompilerExports.precompile,\n      _Ember: emberTemplateCompilerExports._Ember,\n    };\n  } else {\n    // Older Ember versions (prior to 3.27) do not expose a public way to to source 2 source compilation of templates.\n    // because of this, we must resort to some hackery.\n    //\n    // We use the following API's (that we grab from Ember.__loader):\n    //\n    // * glimmer/syntax's preprocess\n    // * glimmer/syntax's print\n    // * ember-template-compiler/lib/system/compile-options's defaultOptions\n    let syntax = (emberTemplateCompilerExports.Ember ?? emberTemplateCompilerExports._Ember).__loader.require(\n      '@glimmer/syntax'\n    );\n    let compilerOptions = (emberTemplateCompilerExports.Ember ?? emberTemplateCompilerExports._Ember).__loader.require(\n      'ember-template-compiler/lib/system/compile-options'\n    );\n\n    return {\n      print: syntax.print,\n      preprocess: syntax.preprocess,\n      defaultOptions: compilerOptions.default,\n      precompile: emberTemplateCompilerExports.precompile,\n      _Ember: emberTemplateCompilerExports._Ember,\n    };\n  }\n}\n"]}