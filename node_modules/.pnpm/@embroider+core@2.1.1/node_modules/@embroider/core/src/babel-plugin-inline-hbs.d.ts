import type * as Babel from '@babel/core';
import type { TemplateCompiler } from './template-compiler-common';
import { ResolvedDep } from './resolver';
import { ImportUtil } from 'babel-import-util';
interface State<O> {
    opts: O;
    file: {
        code: string;
        opts: {
            filename: string;
        };
    };
    dependencies: Map<string, ResolvedDep>;
    templateCompiler: TemplateCompiler | undefined;
    adder: ImportUtil;
}
export default function make<O>(getCompiler: (opts: O) => TemplateCompiler): {
    (babel: typeof Babel): Babel.PluginObj<State<O>>;
    _parallelBabel: {
        requireFile: string;
    };
    baseDir(): string;
};
export {};
