{"version":3,"file":"load-ember-template-compiler.js","sourceRoot":"","sources":["load-ember-template-compiler.ts"],"names":[],"mappings":";;;AAAA,2BAAgD;AAChD,2BAA2C;AAC3C,mCAAoC;AACpC,uEAAkD;AAYlD,MAAM,KAAK,GAAG,IAAI,GAAG,EAAsC,CAAC;AAE5D,SAAgB,eAAe,CAAC,oBAA4B;IAC1D,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAE5C,IAAI,KAAK,EAAE;QACT,IAAI,WAAW,GAAG,IAAA,aAAQ,EAAC,oBAAoB,CAAC,CAAC;QAEjD,oDAAoD;QACpD,IACE,WAAW,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI;YACpC,WAAW,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI;YACpC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAC1D;YACA,OAAO,KAAK,CAAC,KAAK,CAAC;SACpB;KACF;IAED,IAAI,IAAI,GAAG,IAAA,aAAQ,EAAC,oBAAoB,CAAC,CAAC;IAE1C,IAAI,MAAM,GAAG,IAAA,+BAAK,EAAC,IAAA,iBAAY,EAAC,oBAAoB,EAAE,MAAM,CAAC,EAAE,oBAAoB,CAAC,CAAC;IACrF,IAAI,UAAU,GAAQ,SAAS,CAAC;IAEhC,uBAAuB;IACvB,IAAI,QAAQ,GAAG,IAAA,mBAAU,EAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE9D,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;QACpB,KAAK,EAAE;YACL,QAAQ;YACR,IAAI,UAAU;gBACZ,IAAI,UAAU,EAAE;oBACd,OAAO,UAAU,CAAC;iBACnB;gBAED,6EAA6E;gBAC7E,IAAI,OAAO,GAAG;oBACZ,MAAM,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE;oBAChC,OAAO;iBACR,CAAC;gBAEF,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;oBACrC,2EAA2E;oBAC3E,+DAA+D;oBAC/D,uCAAuC;oBACtC,OAAe,CAAC,MAAM,GAAG,OAAO,CAAC;iBACnC;gBACD,sFAAsF;gBACtF,uFAAuF;gBACvF,IAAI,OAAO,GAAG,IAAA,kBAAa,EAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,MAAM,GAAG,IAAI,WAAM,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,oBAAoB,EAAE,CAAC,CAAC;gBAEpE,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC7B,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC/C,CAAC;SACF;QACD,IAAI,EAAE,iFAAiF;KACxF,CAAC,CAAC;IAEH,KAAK,CAAC,GAAG,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;IACvC,OAAO,KAAK,CAAC,KAAK,CAAC;AACrB,CAAC;AA1DD,0CA0DC","sourcesContent":["import fs, { readFileSync, statSync } from 'fs';\nimport { createContext, Script } from 'vm';\nimport { createHash } from 'crypto';\nimport { patch } from './patch-template-compiler';\n\ntype TemplateCompilerCacheEntry = {\n  value: EmbersExports;\n  stat: fs.Stats;\n};\n\ntype EmbersExports = {\n  cacheKey: string;\n  theExports: any;\n};\n\nconst CACHE = new Map<string, TemplateCompilerCacheEntry>();\n\nexport function getEmberExports(templateCompilerPath: string): EmbersExports {\n  let entry = CACHE.get(templateCompilerPath);\n\n  if (entry) {\n    let currentStat = statSync(templateCompilerPath);\n\n    // Let's ensure the template is still what we cached\n    if (\n      currentStat.mode === entry.stat.mode &&\n      currentStat.size === entry.stat.size &&\n      currentStat.mtime.getTime() === entry.stat.mtime.getTime()\n    ) {\n      return entry.value;\n    }\n  }\n\n  let stat = statSync(templateCompilerPath);\n\n  let source = patch(readFileSync(templateCompilerPath, 'utf8'), templateCompilerPath);\n  let theExports: any = undefined;\n\n  // cacheKey, theExports\n  let cacheKey = createHash('md5').update(source).digest('hex');\n\n  entry = Object.freeze({\n    value: {\n      cacheKey,\n      get theExports() {\n        if (theExports) {\n          return theExports;\n        }\n\n        // matches (essentially) what ember-cli-htmlbars does in https://git.io/Jtbpj\n        let sandbox = {\n          module: { require, exports: {} },\n          require,\n        };\n\n        if (typeof globalThis === 'undefined') {\n          // for Node 10 usage with Ember 3.27+ we have to define the `global` global\n          // in order for ember-template-compiler.js to evaluate properly\n          // due to this code https://git.io/Jtb7\n          (sandbox as any).global = sandbox;\n        }\n        // using vm.createContext / vm.Script to ensure we evaluate in a fresh sandbox context\n        // so that any global mutation done within ember-template-compiler.js does not leak out\n        let context = createContext(sandbox);\n        let script = new Script(source, { filename: templateCompilerPath });\n\n        script.runInContext(context);\n        return (theExports = context.module.exports);\n      },\n    },\n    stat, // This is stored, so we can reload the templateCompiler if it changes mid-build.\n  });\n\n  CACHE.set(templateCompilerPath, entry);\n  return entry.value;\n}\n"]}