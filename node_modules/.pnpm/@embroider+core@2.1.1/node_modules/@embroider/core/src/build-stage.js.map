{"version":3,"file":"build-stage.js","sourceRoot":"","sources":["build-stage.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sEAA6D;AAI7D,2DAA6C;AAE7C,2EAA2E;AAC3E,+DAA+D;AAC/D,sEAAsE;AACtE,MAAqB,UAAU;IAK7B,YACU,SAAgB,EAChB,OAAmB,EACnB,UAAkB,EAClB,WAIiC;QAPjC,cAAS,GAAT,SAAS,CAAO;QAChB,YAAO,GAAP,OAAO,CAAY;QACnB,eAAU,GAAV,UAAU,CAAQ;QAClB,gBAAW,GAAX,WAAW,CAIsB;IACxC,CAAC;IAGJ,IAAI,IAAI;QACN,OAAO,IAAI,wBAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,EAAC,SAAS,EAAC,EAAE;YACrF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAChB,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;gBAChE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;gBACjC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;aAC1F;YACD,OAAQ,SAAiB,CAAC,eAAe,CAAC;YAC1C,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,KAAK;QACT,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAC9B,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,UAAW;YAC5B,YAAY,EAAE,IAAI,CAAC,YAAa;SACjC,CAAC;IACJ,CAAC;IAGD,IAAY,UAAU;QACpB,IAAI,OAAiB,CAAC;QACtB,IAAI,OAAO,GAAkB,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7D,OAAO,EAAE,OAAO,EAAE,OAAQ,EAAE,OAAO,EAAE,CAAC;IACxC,CAAC;IAEO,OAAO,CAAC,OAAmB;QACjC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAEO,SAAS,CAAC,SAA8C;QAC9D,OAAQ,SAAiB,CAAC,eAAe,CAAC;QAC1C,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAzCC;IADC,IAAA,4BAAO,GAAE;sCAaT;AAeD;IADC,IAAA,4BAAO,GAAE;4CAKT;AAhDH,6BA0DC","sourcesContent":["import WaitForTrees, { OutputPaths } from './wait-for-trees';\nimport { PackageCache } from '@embroider/shared-internals';\nimport Stage from './stage';\nimport { Node } from 'broccoli-node-api';\nimport { Memoize } from 'typescript-memoize';\n\n// This is a utility class for defining new Stages. It aids in handling the\n// boilerplate required to split your functionality between the\n// broccoli-pipeline-construction phase and the actual building phase.\nexport default class BuildStage<NamedTrees> implements Stage {\n  private active: BuilderInstance<NamedTrees> | undefined;\n  private outputPath: string | undefined;\n  private packageCache: PackageCache | undefined;\n\n  constructor(\n    private prevStage: Stage,\n    private inTrees: NamedTrees,\n    private annotation: string,\n    private instantiate: (\n      root: string,\n      appSrcDir: string,\n      packageCache: PackageCache\n    ) => Promise<BuilderInstance<NamedTrees>>\n  ) {}\n\n  @Memoize()\n  get tree(): Node {\n    return new WaitForTrees(this.augment(this.inTrees), this.annotation, async treePaths => {\n      if (!this.active) {\n        let { outputPath, packageCache } = await this.prevStage.ready();\n        this.outputPath = outputPath;\n        this.packageCache = packageCache;\n        this.active = await this.instantiate(outputPath, this.prevStage.inputPath, packageCache);\n      }\n      delete (treePaths as any).__prevStageTree;\n      await this.active.build(this.deAugment(treePaths));\n      this.deferReady.resolve();\n    });\n  }\n\n  get inputPath(): string {\n    return this.prevStage.inputPath;\n  }\n\n  async ready(): Promise<{ outputPath: string; packageCache: PackageCache }> {\n    await this.deferReady.promise;\n    return {\n      outputPath: this.outputPath!,\n      packageCache: this.packageCache!,\n    };\n  }\n\n  @Memoize()\n  private get deferReady() {\n    let resolve: Function;\n    let promise: Promise<void> = new Promise(r => (resolve = r));\n    return { resolve: resolve!, promise };\n  }\n\n  private augment(inTrees: NamedTrees): NamedTrees & ExtraTree {\n    return Object.assign({ __prevStageTree: this.prevStage.tree }, inTrees);\n  }\n\n  private deAugment(treePaths: OutputPaths<NamedTrees & ExtraTree>): OutputPaths<NamedTrees> {\n    delete (treePaths as any).__prevStageTree;\n    return treePaths;\n  }\n}\n\ninterface BuilderInstance<NamedTrees> {\n  build(inputPaths: OutputPaths<NamedTrees>): Promise<void>;\n}\n\ninterface ExtraTree {\n  __prevStageTree: Node;\n}\n"]}