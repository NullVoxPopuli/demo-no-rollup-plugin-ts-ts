import { Resolver, ResolvedDep } from './resolver';
export interface Plugins {
    ast?: unknown[];
}
export interface AST {
    _deliberatelyOpaque: 'AST';
}
export interface PreprocessOptions {
    contents: string;
    moduleName: string;
    plugins?: Plugins;
    filename?: string;
    parseOptions?: {
        srcName?: string;
        ignoreStandalone?: boolean;
    };
    mode?: 'codemod' | 'precompile';
    strictMode?: boolean;
    locals?: string[];
}
export interface PrinterOptions {
    entityEncoding?: 'transformed' | 'raw';
}
export interface GlimmerSyntax {
    preprocess(html: string, options?: PreprocessOptions): AST;
    print(ast: AST, options?: PrinterOptions): string;
    defaultOptions(options: PreprocessOptions): PreprocessOptions;
    precompile(templateContents: string, options: {
        contents: string;
        moduleName: string;
        filename: string;
        plugins?: any;
        parseOptions?: {
            srcName?: string;
        };
    }): string;
    _Ember: {
        FEATURES: any;
        ENV: any;
    };
}
export interface TemplateCompilerParams {
    loadEmberTemplateCompiler: () => {
        theExports: unknown;
        cacheKey: string;
    };
    resolver?: Resolver;
    EmberENV: unknown;
    plugins: Plugins;
}
export declare class TemplateCompiler {
    private loadEmberTemplateCompiler;
    private resolver?;
    private EmberENV;
    private plugins;
    constructor(params: TemplateCompilerParams);
    private get syntax();
    get cacheKey(): string;
    private setup;
    private getReversedASTPlugins;
    precompile(templateSource: string, options: Record<string, unknown> & {
        filename: string;
    }): {
        compiled: string;
        dependencies: ResolvedDep[];
    };
    applyTransforms(moduleName: string, contents: string): string;
    parse(moduleName: string, contents: string): AST;
    baseDir(): string;
}
