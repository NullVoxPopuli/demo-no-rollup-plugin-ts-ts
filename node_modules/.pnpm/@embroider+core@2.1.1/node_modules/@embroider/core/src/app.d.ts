import { Package, AddonPackage } from '@embroider/shared-internals';
import { OutputPaths } from './wait-for-trees';
import { Asset } from './asset';
import Options from './options';
import { MacrosConfig } from '@embroider/macros/src/node';
import { TransformOptions } from '@babel/core';
import { Options as AdjustImportsOptions } from './babel-plugin-adjust-imports';
import type { Transform } from 'babel-plugin-ember-template-compilation';
export declare type EmberENV = unknown;
export interface AppAdapter<TreeNames> {
    readonly allActiveAddons: AddonPackage[];
    activeAddonChildren(pkg: Package): AddonPackage[];
    appJSSrcDir(treePaths: OutputPaths<TreeNames>): string;
    fastbootJSSrcDir(treePaths: OutputPaths<TreeNames>): string | undefined;
    assets(treePaths: OutputPaths<TreeNames>): Asset[];
    autoRun(): boolean;
    appBoot(): string | undefined;
    mainModule(): string;
    mainModuleConfig(): unknown;
    modulePrefix(): string;
    podModulePrefix(): string | undefined;
    rootURL(): string;
    templateCompilerPath(): string;
    resolverTransform(): Transform | undefined;
    adjustImportsOptions(): AdjustImportsOptions;
    adjustImportsOptionsPath(): string;
    htmlbarsPlugins(): Transform[];
    babelConfig(): TransformOptions;
    babelMajorVersion(): 7;
    emberENV(): EmberENV;
    strictV2Format(): boolean;
    developingAddons(): string[];
    env: string;
}
export declare function excludeDotFiles(files: string[]): string[];
export declare const CACHE_BUSTING_PLUGIN: {
    path: string;
    version: any;
};
export declare function addCachablePlugin(babelConfig: TransformOptions): void;
export declare class AppBuilder<TreeNames> {
    private root;
    private app;
    private adapter;
    private options;
    private macrosConfig;
    private assets;
    constructor(root: string, app: Package, adapter: AppAdapter<TreeNames>, options: Required<Options>, macrosConfig: MacrosConfig);
    private scriptPriority;
    private get resolvableExtensionsPattern();
    private impliedAssets;
    private impliedAddonAssets;
    private babelParserConfig;
    private babelConfig;
    private adjustImportsPlugin;
    private insertEmberApp;
    private implicitScriptsAsset;
    private implicitStylesAsset;
    private implicitTestScriptsAsset;
    private implicitTestStylesAsset;
    private findActiveAddons;
    private partitionEngines;
    private get activeFastboot();
    private get fastbootConfig();
    private appDiffers;
    private updateAppJS;
    private prepareAsset;
    private prepareAssets;
    private assetIsValid;
    private updateOnDiskAsset;
    private updateInMemoryAsset;
    private updateBuiltEmberAsset;
    private updateConcatenatedAsset;
    private updateAssets;
    private gatherAssets;
    build(inputPaths: OutputPaths<TreeNames>): Promise<void>;
    private combinePackageJSON;
    private etcOptions;
    private get portableHints();
    private addBabelConfig;
    private shouldSplitRoute;
    private splitRoute;
    private topAppJSAsset;
    private get staticAppPathsPattern();
    private requiredOtherFiles;
    private appJSAsset;
    private get modulePrefix();
    private importPaths;
    private routeEntrypoint;
    private testJSEntrypoint;
    private gatherImplicitModules;
}
